data <- data[,-1]
names(data) <- c("samples","value","condition")
ggplot(data, aes(x = value, color = condition)) + geom_density()
}
}
## BPC
plotTFM(data_MetabRS, plot = "BPC")
Arguments
# data_type
# Tipo de datos a introducir, puede ser "microarray", "RNA-Seq", "MetabRS",
# MetabSB o MetabMC
# path
# Ruta de ubicación de los archivos para data_type = "microarray" o "MetabRS"
# file_type
# Tipo de archivos,  para data_type = "MetabRS". Puede ser ".NetCDF", ".mzML",
# ".mzXML" o ".mzData"
# raw_data
# Ruta y/o nombre del archivo con los datos brutos del experimento, para data_type = "RNA-Seq",
# "MetabSB" o "MetabMC". Debe ser un archivo .csv o .txt con cabecera. La primera columna debe
# corresponder a los genes ("RNA-Seq"), los bins ("MetabSB") o los metabolitos ("MetabMC") y las
# siguientes a las muestras.
# sep_rd
# el carácter separador de campo para el archivo raw_data. Los valores de cada línea del
# archivo están separados por este carácter. De forma predeterminada sep_rd = "".
# targets
# Ruta y/o nombre del archivo con la información sobre las muestras del experimento. Debe ser
# un archivo .csv o .txt con cabecera. Para data_type = "microarray" o "MetabRS" debe tener
# tres columnas como mínimo, la primera con el nombre de los archivos que contienen los
# datos de cada muestra, la segunda con un identificador único de las muestras y la tercera
# con el grupo experimental de las muestras. Para el resto debe tener dos columnas como
# mínimo, la primera con el identificador de las muestras y la segunda con el grupo
# experimental de las muestras. En ambos casos se aceptan más columnas como covariables.
# sep_targ
# el carácter separador de campo para el archivo targets. Los valores de cada línea del
# archivo están separados por este carácter. De forma predeterminada sep_targ = "".
# Instalación de paquetes de R
library(oligoClasses)
library(Biobase)
library(oligo)
library(edgeR)
library(MSnbase)
library(SummarizedExperiment)
library(POMA)
read_data <- function(data_type, path, file_type, raw_data, sep_rd = "", targets,
sep_targ = "") {
if(missing(data_type)) stop("argument data_type is missing, with no default")
if(data_type != "microarray" & data_type != "RNA-Seq" & data_type != "MetabRS" &
data_type != "MetabPL" & data_type != "MetabSB" & data_type != "MetabMC") {
stop("Data type must be microarray, RNA-Seq, MetabRS, MetabPL, MetabSB or MetabMC")
}
if(data_type == "microarray" | data_type == "MetabRS" | data_type == "MetabPL") {
if(missing(path)) stop("argument path is missing, with no default")
min_col = 3
}
if(data_type == "MetabRS") {
if(missing(file_type)) stop("argument file_type is missing, with no default")
if(file_type != ".NetCDF" & file_type != ".mzML" &
file_type != ".mzXML" & file_type != ".mzData") stop("the file_type is wrong")
}
if(data_type == "RNA-Seq" | data_type == "MetabSB" | data_type == "MetabMC") {
if(missing(raw_data)) stop("argument counts is missing, with no default")
file <- read.table(raw_data, header = TRUE, row.names = 1, sep = sep_rd)
min_col = 2
}
if(missing(targets)) stop("argument targets is missing, with no default")
if(data_type != "microarray") {
sampleinfo <- read.table(targets, header = TRUE, sep = sep_targ, stringsAsFactors = TRUE)
if(ncol(sampleinfo) < min_col) {
stop("the number of columns of the targets object must be greater than 1")
}
}
if(data_type == "microarray") {
files <- list.celfiles(path, full.names = TRUE)
sampleinfo <- read.AnnotatedDataFrame(targets, header = TRUE, row.names = 1,
sep = sep_targ)
min_col <- 2
if(ncol(sampleinfo) < min_col) {
stop("the number of columns of the targets object must be greater than 2")
}
data <- read.celfiles(files, phenoData = sampleinfo)
sampleinfo@data[,1] -> rownames(pData(data))
colnames(data) <- rownames(pData(data))
} else if(data_type == "RNA-Seq") {
colnames(file) <- sampleinfo[,2]
if(ncol(sampleinfo) == min_col+1) {
data <- DGEList(file, group = sampleinfo[,3])
} else {
data <- DGEList(file, group = sampleinfo[,3], samples = sampleinfo[,4:ncol(sampleinfo)])
}
} else if(data_type == "MetabRS") {
files <- list.files(path, recursive = TRUE, full.names = TRUE, pattern = file_type)
data <- readMSData(files = files, pdata = new("NAnnotatedDataFrame", sampleinfo),
mode = "onDisk")
sampleinfo[,2] -> rownames(pData(data))
} else if(data_type == "MetabPL") {
stop("en contstrucción")
} else if(data_type == "MetabSB") {
rdata <- DataFrame(row.names = rownames(file))
cdata <- DataFrame(sampleinfo[2:ncol(sampleinfo)], row.names = sampleinfo[,1])
file <- list(file)
file <- SimpleList(file)
data <- SummarizedExperiment(file, rowData = rdata, colData = cdata)
} else if(data_type == "MetabMC") {
file <- t(file)
data <- PomaMSnSetClass(target = sampleinfo, features = file)
}
return(data)
}
# Ejemplos
# Microarrays
data_microarray <- read_data(data_type = "microarray",
path = "./microarray",
targets = "./microarray/targets.csv", sep_targ = ";")
data_microarray
# RNA-Seq
data_RNASeq <- read_data(data_type = "RNA-Seq",
raw_data = "./RNA-Seq/counts.csv", sep_rd = "\t",
targets = "./RNA-Seq/targets.csv", sep_targ = ";")
data_RNASeq
# GC/LC-MS raw spectra
data_MetabRS <- read_data(data_type = "MetabRS",
path = "./Met_mzML", file_type = ".mzML",
targets = "./Met_mzML/targets.csv", sep_targ = ";")
data_MetabRS
# MS/NMR spectra bins
data_MetabSB <- read_data(data_type = "MetabSB",
raw_data = "./Met_spectra_bins/spectra.csv", sep_rd = ",",
targets = "./Met_spectra_bins/targets.csv", sep_targ = ",")
data_MetabSB
# Concentraciones de metabolitos
data_MetabMC <- read_data(data_type = "MetabMC",
raw_data = "./Met_conc/concent.csv", sep_rd = ",",
targets = "./Met_conc/targets.csv", sep_targ = ",")
data_MetabMC
setwd("~/Escritorio/TFM/PEC2_Fase1/Funciones/data")
# Arguments
# data_type
# Tipo de datos a introducir, puede ser "microarray", "RNA-Seq", "MetabRS",
# MetabSB o MetabMC
# path
# Ruta de ubicación de los archivos para data_type = "microarray" o "MetabRS"
# file_type
# Tipo de archivos,  para data_type = "MetabRS". Puede ser ".NetCDF", ".mzML",
# ".mzXML" o ".mzData"
# raw_data
# Ruta y/o nombre del archivo con los datos brutos del experimento, para data_type = "RNA-Seq",
# "MetabSB" o "MetabMC". Debe ser un archivo .csv o .txt con cabecera. La primera columna debe
# corresponder a los genes ("RNA-Seq"), los bins ("MetabSB") o los metabolitos ("MetabMC") y las
# siguientes a las muestras.
# sep_rd
# el carácter separador de campo para el archivo raw_data. Los valores de cada línea del
# archivo están separados por este carácter. De forma predeterminada sep_rd = "".
# targets
# Ruta y/o nombre del archivo con la información sobre las muestras del experimento. Debe ser
# un archivo .csv o .txt con cabecera. Para data_type = "microarray" o "MetabRS" debe tener
# tres columnas como mínimo, la primera con el nombre de los archivos que contienen los
# datos de cada muestra, la segunda con un identificador único de las muestras y la tercera
# con el grupo experimental de las muestras. Para el resto debe tener dos columnas como
# mínimo, la primera con el identificador de las muestras y la segunda con el grupo
# experimental de las muestras. En ambos casos se aceptan más columnas como covariables.
# sep_targ
# el carácter separador de campo para el archivo targets. Los valores de cada línea del
# archivo están separados por este carácter. De forma predeterminada sep_targ = "".
# Instalación de paquetes de R
library(oligoClasses)
library(Biobase)
library(oligo)
library(edgeR)
library(MSnbase)
library(SummarizedExperiment)
library(POMA)
read_data <- function(data_type, path, file_type, raw_data, sep_rd = "", targets,
sep_targ = "") {
if(missing(data_type)) stop("argument data_type is missing, with no default")
if(data_type != "microarray" & data_type != "RNA-Seq" & data_type != "MetabRS" &
data_type != "MetabPL" & data_type != "MetabSB" & data_type != "MetabMC") {
stop("Data type must be microarray, RNA-Seq, MetabRS, MetabPL, MetabSB or MetabMC")
}
if(data_type == "microarray" | data_type == "MetabRS" | data_type == "MetabPL") {
if(missing(path)) stop("argument path is missing, with no default")
min_col = 3
}
if(data_type == "MetabRS") {
if(missing(file_type)) stop("argument file_type is missing, with no default")
if(file_type != ".NetCDF" & file_type != ".mzML" &
file_type != ".mzXML" & file_type != ".mzData") stop("the file_type is wrong")
}
if(data_type == "RNA-Seq" | data_type == "MetabSB" | data_type == "MetabMC") {
if(missing(raw_data)) stop("argument counts is missing, with no default")
file <- read.table(raw_data, header = TRUE, row.names = 1, sep = sep_rd)
min_col = 2
}
if(missing(targets)) stop("argument targets is missing, with no default")
if(data_type != "microarray") {
sampleinfo <- read.table(targets, header = TRUE, sep = sep_targ, stringsAsFactors = TRUE)
if(ncol(sampleinfo) < min_col) {
stop("the number of columns of the targets object must be greater than 1")
}
}
if(data_type == "microarray") {
files <- list.celfiles(path, full.names = TRUE)
sampleinfo <- read.AnnotatedDataFrame(targets, header = TRUE, row.names = 1,
sep = sep_targ)
min_col <- 2
if(ncol(sampleinfo) < min_col) {
stop("the number of columns of the targets object must be greater than 2")
}
data <- read.celfiles(files, phenoData = sampleinfo)
sampleinfo@data[,1] -> rownames(pData(data))
colnames(data) <- rownames(pData(data))
} else if(data_type == "RNA-Seq") {
colnames(file) <- sampleinfo[,2]
if(ncol(sampleinfo) == min_col+1) {
data <- DGEList(file, group = sampleinfo[,3])
} else {
data <- DGEList(file, group = sampleinfo[,3], samples = sampleinfo[,4:ncol(sampleinfo)])
}
} else if(data_type == "MetabRS") {
files <- list.files(path, recursive = TRUE, full.names = TRUE, pattern = file_type)
data <- readMSData(files = files, pdata = new("NAnnotatedDataFrame", sampleinfo),
mode = "onDisk")
sampleinfo[,2] -> rownames(pData(data))
} else if(data_type == "MetabPL") {
stop("en contstrucción")
} else if(data_type == "MetabSB") {
rdata <- DataFrame(row.names = rownames(file))
cdata <- DataFrame(sampleinfo[2:ncol(sampleinfo)], row.names = sampleinfo[,1])
file <- list(file)
file <- SimpleList(file)
data <- SummarizedExperiment(file, rowData = rdata, colData = cdata)
} else if(data_type == "MetabMC") {
file <- t(file)
data <- PomaMSnSetClass(target = sampleinfo, features = file)
}
return(data)
}
# Ejemplos
# Microarrays
data_microarray <- read_data(data_type = "microarray",
path = "./microarray",
targets = "./microarray/targets.csv", sep_targ = ";")
data_microarray
# RNA-Seq
data_RNASeq <- read_data(data_type = "RNA-Seq",
raw_data = "./RNA-Seq/counts.csv", sep_rd = "\t",
targets = "./RNA-Seq/targets.csv", sep_targ = ";")
data_RNASeq
# GC/LC-MS raw spectra
data_MetabRS <- read_data(data_type = "MetabRS",
path = "./Met_mzML", file_type = ".mzML",
targets = "./Met_mzML/targets.csv", sep_targ = ";")
data_MetabRS
# MS/NMR spectra bins
data_MetabSB <- read_data(data_type = "MetabSB",
raw_data = "./Met_spectra_bins/spectra.csv", sep_rd = ",",
targets = "./Met_spectra_bins/targets.csv", sep_targ = ",")
data_MetabSB
# Concentraciones de metabolitos
data_MetabMC <- read_data(data_type = "MetabMC",
raw_data = "./Met_conc/concent.csv", sep_rd = ",",
targets = "./Met_conc/targets.csv", sep_targ = ",")
data_MetabMC
# Arguments
# object:
# Objeto de la clase ExpressionFeatureSet
# plot:
# Tipo de gráfico. Puede ser "PCA" para gráfico de componentes principales, "boxplot" para
# diagramas de caja, "MDS" para un gráfico de escalado multidimensional, heatmap para un mapa
# de calor de la varianza de genes, "barplot" para un gráfico de barras de las librerias usadas,
# "BPC" para un cromatograma de pico base, "heatmapS" para un mapa de calor por muestras,  ...
# Instalación de paquetes de R
library(ggplot2)
library(ggrepel)
library(reshape)
library(RColorBrewer)
library(gplots)
library(pheatmap)
plotTFM <- function (object, plot) {
if(plot == "PCA") {
# Análisis de Componentes Principales
# Para Microarray
class(object) == "ExpressionFeatureSet"
datos <- exprs(object)
factor <- pData(object)[[2]]
labels <- pData(object)[[1]]
name <- varLabels(phenoData(object))[2]
title <- "Microarrays"
colores = topo.colors(length(levels(as.factor(factor))))
# General
# Obtención de datos
data <- prcomp(t(datos), scale=FALSE)
# ajustes de gráfico
dataDf <- data.frame(data$x)
Group <- factor
loads <- round(data$sdev^2/sum(data$sdev^2)*100,1)
# título del gráfico
p1 <- ggplot(dataDf, aes(x=PC1, y=PC2)) +
theme_classic() +
geom_hline(yintercept = 0, color = "gray70") +
geom_vline(xintercept = 0, color = "gray70") +
geom_point(aes(color = Group), alpha = 0.55, size = 3) +
coord_cartesian(xlim = c(min(data$x[,1])-5,max(data$x[,1])+5)) +
scale_fill_discrete(name = name)
# evitando la superposición de etiquetas
p1 + geom_text_repel(aes(y = PC2 + 0.25, label = labels), segment.size = 0.25,
size = 1.5) +
labs(x = c(paste("PC1", loads[1],"%")),y=c(paste("PC2",loads[2],"%"))) +
ggtitle(paste("PCA para: ",title,sep=" ")) +
theme(plot.title = element_text(hjust = 0.5)) +
scale_color_manual(values=colores)
} else if(plot == "boxplot") {
# Boxplot
if(class(object) == "ExpressionFeatureSet") {
ngroup <- length(unique(pData(object)[2][,1]))
logdata <- cpm(exprs(object), log = TRUE)
} else if(class(object) == "DGEList") {
ngroup <- length(levels(object$samples[[1]]))
logdata <- cpm(object, log = TRUE)
} else if(class(object) == "OnDiskMSnExp") {
ngroup <- length(levels(pData(object)[[3]]))
matrix <- matrix(tic(object), ncol = nrow(phenoData(object)@data))
datos <- as.data.frame(matrix)
colnames(datos) <- rownames(phenoData(object))
logdata <- cpm(datos, log = TRUE)
} else if(class(object) == "SummarizedExperiment") {
ngroup <- length(levels(as.data.frame(colData(object))[[1]]))
logdata <- cpm(assay(object), log = TRUE)
} else if(class(object) == "MSnSet") {
ngroup <- length(levels(pData(object)[[1]]))
logdata <- cpm(exprs(object), log = TRUE)
}
# General
data <- melt(logdata)
data <- data.frame(data, condition = cond_vect(object))
data <- data[,-1]
names(data) <- c("samples","value","condition")
ggplot(data, aes(x = samples, y = value, fill = condition)) + geom_boxplot() +
xlab("") + ylab("") +
scale_fill_manual(values = topo.colors(ngroup))
} else if(plot == "MDS") {
# MDS
# Para RNA-Seq
ngroup <- length(levels(object$samples[[1]]))
groups <- levels(object$samples$group)
# General
plotMDS(object, col = col_vect(object), las = 1)
legend("bottomleft", fill = topo.colors(ngroup), legend = groups)
} else if(plot == "heatmap") {
# Heatmap
# Para RNA-Seq
ngroup <- length(levels(object$samples[[1]]))
logdata <- cpm(object, log = TRUE)
data <- logdata
var_rows <- apply(data, 1, var)
# General
if(nrow(data) < 500) n = nrow(data) else n = 500
select_var <- names(sort(var_rows, decreasing = TRUE))[1:n]
data <- data[select_var,]
mypalette <- brewer.pal(11,"RdYlBu")
morecols <- colorRampPalette(mypalette)
col.cell <- col_vect(object)
heatmap.2(data, col = rev(morecols(50)), trace = "none",
ColSideColors = col.cell, scale = "row")
} else if(plot == "barplot") {
# Para RNA-Seq
barplot(object$samples$lib.size, names = colnames(object),
las = 1, col = col_vect(object))
} else if(plot == "BPC") {
# BPC
# Para MetabRS
ngroup <- length(levels(pData(object)[[3]]))
groups <- levels(pData(object)[[3]])
bpis <- chromatogram(object, aggregationFun = "max")
plot(bpis, col = col_vect(object))
legend("topright", fill = topo.colors(ngroup), legend = groups)
} else if(plot == "heatmapS") {
# Heatmap de muestras
# Para MetabRS
ngroup <- length(levels(pData(object)[[3]]))
colors <- topo.colors(ngroup)
names(colors) <- levels(pData(object)[[3]])
bpis <- chromatogram(object, aggregationFun = "max")
bpis_bin <- bin(bpis)
cormat <- cor(log2(do.call(cbind, lapply(bpis_bin, intensity))))
colnames(cormat) <- rownames(cormat) <- as.character(pData(object)[2][,1])
ann <- data.frame(group = pData(object)[3][,1])
rownames(ann) <- as.character(pData(object)[2][,1])
pheatmap(cormat, annotation = ann,
annotation_color = list(group = colors))
} else if(plot == "density") {
# Density plot
# Para MetabMC
data <- melt(exprs(object))
data <- data.frame(data, condition = cond_vect(object))
data <- data[,-1]
names(data) <- c("samples","value","condition")
ggplot(data, aes(x = value, color = condition)) + geom_density()
}
}
plotTFM(set, plot = "boxplot")
# Vector de colores
col_vect <- function(object) {
if(class(object) == "ExpressionFeatureSet") {
vector <- pData(object)[[2]]
factor <- as.factor(vector)
colors <- topo.colors(length(levels(factor)))
} else if(class(object) == "DGEList") {
vector <- as.character(object$samples$group)
factor <- object$samples$group
colors <- topo.colors(length(levels(object$samples$group)))
} else if(class(object) == "OnDiskMSnExp") {
factor <- pData(object)[[3]]
vector <- as.character(vector)
colors <- topo.colors(length(levels(factor)))
}
for(i in 1:length(levels(factor))) {
for(j in 1:length(vector)) {
if(levels(factor)[i] == vector[j]) vector[j] <- colors[i]
}
}
return(vector)
}
# Crear vector de grupop experimental por muestra y gen/metabolito
cond_vect <- function(object) {
if(class(object) == "ExpressionFeatureSet") {
datos <- exprs(object)
grupos <- pData(object)[2][,1]
} else if(class(object) == "DGEList") {
datos <- object$counts
grupos <- as.character(object$samples$group)
} else if(class(object) == "OnDiskMSnExp") {
datos <- matrix(tic(object), ncol = nrow(phenoData(object)@data))
colnames(datos) <- rownames(phenoData(object))
grupos <- as.character(pData(object)[3][,1])
} else if(class(object) == "SummarizedExperiment") {
datos <- assay(object)
grupos <- as.character(colData(object)[,1])
} else if(class(object) == "MSnSet") {
datos <- exprs(object)
grupos <- as.character(pData(object)[[1]])
}
condition <- c()
for(i in 1:ncol(datos)) {
condition <- c(condition, rep(grupos[i], nrow(datos)))
}
return(condition)
}
# Microarrays
class(data_microarray) == "ExpressionFeatureSet"
## Gráfico PCA
plotTFM(data_microarray, plot = "PCA")
## Boxplot
plotTFM(data_microarray, plot = "boxplot")
# RNA-Seq
class(data_RNASeq) == "DGEList"
## Barplot (número de librerías)
plotTFM(data_RNASeq, plot = "barplot")
## Boxplot
plotTFM(data_RNASeq, plot = "boxplot")
## MDPlot
plotTFM(data_RNASeq, plot = "MDS")
## HeatMap (analitos)
plotTFM(data_RNASeq, plot = "heatmap")
# MetabRS
class(data_MetabRS) == "OnDiskMSnExp"
## BPC
plotTFM(data_MetabRS, plot = "BPC")
## Boxplot
plotTFM(data_MetabRS, plot = "boxplot")
## Heatmap (muestras)
plotTFM(data_MetabRS, plot = "heatmapS")
# MetabPL
# MetabSB
class(data_MetabSB) == "SummarizedExperiment"
plotTFM(data_MetabSB, plot = "boxplot")
# MetabMC
class(data_MetabMC) == "MSnSet"
plotTFM(data_MetabMC, plot = "boxplot")
plotTFM(data_MetabMC, plot = "density")
object <- data_MetabRS
# Para MetabRS
ngroup <- length(levels(pData(object)[[3]]))
colors <- topo.colors(ngroup)
names(colors) <- levels(pData(object)[[3]])
bpis <- chromatogram(object, aggregationFun = "max")
bpis_bin <- bin(bpis)
cormat <- cor(log2(do.call(cbind, lapply(bpis_bin, intensity))))
colnames(cormat) <- rownames(cormat) <- as.character(pData(object)[2][,1])
ann <- data.frame(group = pData(object)[3][,1])
??do.call
library(BiocGenerics)
cormat <- cor(log2(do.call(cbind, lapply(bpis_bin, intensity))))
bpis_bin
lapply(bpis_bin, intensity)
library(pheatmap)
cormat <- cor(log2(do.call(cbind, lapply(bpis_bin, intensity))))
library(magrittr)
cormat <- cor(log2(do.call(cbind, lapply(bpis_bin, intensity))))
library(pander)
cormat <- cor(log2(do.call(cbind, lapply(bpis_bin, intensity))))
raw_data
## Bin the BPC
bpis_bin <- bin(bpis, binSize = 2)
## Calculate correlation on the log2 transformed base peak intensities
cormat <- cor(log2(do.call(cbind, lapply(bpis_bin, intensity))))
colnames(cormat) <- rownames(cormat) <- raw_data$sample_name
## Define which phenodata columns should be highlighted in the plot
ann <- data.frame(group = raw_data$sample_group)
rownames(ann) <- raw_data$sample_name
## Perform the cluster analysis
pheatmap(cormat, annotation = ann,
annotation_color = list(group = group_colors))
