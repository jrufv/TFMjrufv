shiny::runApp()
?dataTableOutput
?reactive
runApp('app2.R')
runApp('app2.R')
runApp()
runApp()
runApp()
runApp()
runApp()
library(shiny)
runApp()
?mtcars
mtcars
runApp()
runApp()
runApp()
runApp()
histogramApp()
library(shiny)
library(bslib)
histogramUI <- function(id) {
tagList(
selectInput(NS(id, "var"), "Variable", choices = names(mtcars)),
numericInput(NS(id, "bins"), "bins", value = 10, min = 1),
plotOutput(NS(id, "hist"))
)
}
histogramServer <- function(id) {
moduleServer(id, function(input, output, session) {
data <- reactive(mtcars[[input$var]])
output$hist <- renderPlot({
hist(data(), breaks = input$bins, main = input$var)
}, res = 96)
})
}
histogramApp <- function() {
ui <- fluidPage(
histogramUI("hist1")
)
server <- function(input, output, session) {
histogramServer("hist1")
}
shinyApp(ui, server)
}
histogramApp()
runApp()
runApp('R')
print(source('~/Escritorio/TFM/App-1/read_data.R')$value)
runApp('read_data.R')
runApp('read_data.R')
runApp('read_data.R')
runApp('read_data.R')
runApp('read_data.R')
?exprs
?Biobase
?MsnSet
?eSet
library(Biobase)
?eSet
runApp('read_data.R')
runApp('read_data.R')
runApp('read_data.R')
library(POMA)
st000284
exprs(st000284)
runApp('read_data.R')
runApp('read_data.R')
read.csv("concent.csv")
a <- read.csv("concent.csv")
head(a)
runApp('read_data.R')
?fileInput
runApp('read_data.R')
?file_ext
?switch
?vroom
runApp('read_data.R')
?read.csv
runApp('read_data.R')
runApp('read_data.R')
?fileInput
runApp('read_data.R')
?read_data
data_MetabMC <- read_data(data_type = "MetabMC",
raw_data = "./data/Met_conc/concent.csv",
sep_rd = ",",
targets = "./data/Met_conc/targets.csv",
sep_targ = ",")
data_MetabMC <- read_data(data_type = "MetabMC",
raw_data = "concent.csv",
sep_rd = ",",
targets = "targets.csv",
sep_targ = ",")
data_MetabMC
head(exprs(data_MetabMC))
runApp('read_data.R')
runApp('read_data.R')
?renderDataTable
runApp('read_data.R')
?sidebarLayout
runApp('read_data.R')
head(exprs(data_MetabMC))
?renderDataTable
runApp('read_data.R')
runApp('read_data.R')
runApp('read_data.R')
?DTOutput
runApp('read_data.R')
runApp('read_data.R')
summary(exprs(data_MetabMC))
summary(pData(data_MetabMC))
summary(fData(data_MetabMC))
runApp('read_data.R')
runApp('read_data.R')
?read_data
data_RNASeq <- read_data(data_type = "RNA-Seq",
raw_data = "./data/RNA-Seq/counts.csv",
sep_rd = "\t",
targets = "./data/RNA-Seq/targets.csv",
sep_targ = ",")
data_RNASeq
data_RNASeq <- read_data(data_type = "RNA-Seq",
raw_data = "counts.csv",
sep_rd = "\t",
targets = "targets.csv",
sep_targ = ",")
data_RNASeq
data$counts
data_RNASeq$counts
class(data_RNASeq$counts)
data_RNASeq[1]
data_RNASeq[[1]]
runApp('read_data.R')
class(data_RNASeq)
?DGEList
a <- as.list(data_RNASeq)
a
runApp('read_data.R')
print(data_RNASeq)
?print
print(data_RNASeq, max.levels = 1)
print(data_RNASeq, max.levels = 0)
runApp('read_data.R')
runApp('read_data.R')
runApp('read_data.R')
runApp('read_data.R')
data_MetabSB <- read_data(data_type = "MetabSB",
raw_data = "./data/Met_spectra_bins/spectra.csv",
sep_rd = ",",
targets = "./data/Met_spectra_bins/targets.csv",
sep_targ = ",")
data_MetabSB
data_MetabSB <- read_data(data_type = "MetabSB",
raw_data = "counts.csv",
sep_rd = ",",
targets = "targets.csv",
sep_targ = ",")
data_MetabSB
data_MetabSB <- read_data(data_type = "MetabSB",
raw_data = "counts.csv",
sep_rd = "\t",
targets = "targets.csv",
sep_targ = ",")
data_MetabSB
data_RNASeq
colData(data_MetabSB)
library(SummarizedExperiment)
colData(data_MetabSB)
class(colData)
colData(data_MetabSB)[1]
colData(data_MetabSB)[[1]]
a <- as.data.frame(colData(data_MetabSB))
a
runApp('read_data.R')
runApp('read_data.R')
config <- read.csv("config.csv")
config
config[1]
config[,1]
config[,2]
config <- read.csv("config.csv")
config[,2]
runApp('read_data.R')
runApp('read_data.R')
runApp('read_data.R')
dt <- c("microarray", "RNA-Seq", "MetabRS", "MetabSB", "MetabMC")
dt
filter(dt, dt == "microarray")
filter(dt, dt == "microarray")
filter(dt, dt == "da")
config
TYPE <- c("microarray", rep("RNA-Seq", 3), rep("MetabRS", 8), rep("MetabSB", 3), rep("MetabMC", 3))
TYPE
SEPrd <- c(NULL, ",", ";", "\t", rep(NULL, 8), ",", ";", "\t", ",", ";", "\t")
SEPrd
SEPrd <- c("NULL", ",", ";", "\t", rep("NULL", 8), ",", ";", "\t", ",", ";", "\t")
SEPrd
EXT <- c(".CEL", rep(".csv", 3), rep(".NetCDF", 2), rep(".mzML", 2), rep(".mzXML", 2), rep(".mzData", 2), rep(".csv", 6))
EXT
MODE <- c(rep("NULL", 4), rep(c("OnDisk", "InMemory"),4), rep("NULL", 6))
MODE
config <- data.frame(TYPE, SEPrd, EXT, MODE)
config
write.csv(config, file = "config.csv")
config
config <- 1
config
config <- vroom("config.csv")
library(vroom)
config <- vroom("config.csv")
config
config <- vroom("config.csv", col_types = list())
config
config <- vroom("config.csv", col_types = list(), na = "")
config
runApp('read_data.R')
runApp('read_data.R')
config <- vroom::vroom("config.csv")
config
config$TYPE
unique(config$TYPE)
?unique
runApp('read_data.R')
config
config %>%
select(TYPE, SEPrd, EXT, MODE, everything()) %>%
arrange(MODE)
??arrange
library(dplyr)
config %>%
select(TYPE, SEPrd, EXT, MODE, everything()) %>%
arrange(MODE)
config
SEPrd
SEPrd <- c(NA, ",", ";", "\t", rep(NA, 8), rep(c(",", ";", "\t"), 2))
SEPrd
TYPE
EXT
MODE
config <- data.frame(TYPE, SEPrd, EXT, MODE)
config
is.na(config)
MODE <- c(rep(NA, 4), rep(c("OnDisk", "InMemory"), 4), rep(NA, 6))
MODE
config <- data.frame(TYPE, SEPrd, EXT, MODE)
config
is.na(config)
write.csv(config, "config.csv")
config <- vroom::vroom("config.csv")
config
runApp('read_data.R')
config
MODE <- c(rep("needless", 4), rep(c("OnDisk", "InMemory"), 4), rep("needless", 6))
MODE
SEPrd <- c("needless", ",", ";", "\t", rep("needless", 8), rep(c(",", ";", "\t"), 2))
config <- vroom::vroom("config.csv")
config
config <- data.frame(TYPE, SEPrd, EXT, MODE)
config
write.csv(config, "config.csv")
config <- vroom::vroom("config.csv")
config
runApp('read_data.R')
head(config)
runApp('read_data.R')
config
runApp('read_data.R')
SEPrd <- c("needless", ",", ";", "Tab", rep("needless", 8), rep(c(",", ";", "Tab"), 2))
config <- data.frame(TYPE, SEPrd, EXT, MODE)
config
write.csv(config, "config.csv")
runApp('read_data.R')
runApp('read_data.R')
runApp('read_data.R')
?feedbackWarning
install.packages("shinyFeedback")
library(shinyFeedback)
?feedbackWarning
runApp('read_data.R')
runApp('read_data.R')
11+2+5+18
num <- c(50479, 66013, 65016, 35558, 28739, 20818, 50538, 50538, 31004, 53993, 53210, 44262, 77040,11194, 10688,37068,30116,26007)
num
nom <- c("DaChCa", "LiTeIz", "Emma", "LeLlMa", "VaFoRo", "KePaOc", "YiXu", "XiXu", "AaCoGo", "KeDoBl", "AiEsCo", "ArPeFe", "YaRuHe", "TiSh", "AlWu", "AnBaPa", "TiReMo", "GaMaJi")
nom
elPilar <- data.frame(num, nom)
elPilar
?sort
sort(elPilar)
sort(elPilar$num)
sort(elPilar, elPilar$num)
elPilar[order(elPilar$num)]
elPilar[order(elPilar$num),]
write.csv(elPilar, file = "ElPilar.csv")
?selectInput
?selectize.js
?fileInput
runApp('read_data.R')
?actionButton
runApp('read_data.R')
bs_theme()
?bs_theme
runApp('read_data.R')
runApp('read_data.R')
runApp('read_data.R')
?bslib
library(bslib)
?bs_theme
runApp('read_data.R')
runApp('read_data.R')
runApp('read_data.R')
runApp('read_data.R')
?mainPanel
?fluidRow
runApp('read_data.R')
?column
?sidebarLayout
?sidebarPanel
bslib::bs_theme_preview(theme)
bslib::bs_theme_preview()
runApp('~/Escritorio/TFM/App-1/read_data.R')
print(source('~/Escritorio/TFM/App-1/read_data.R')$value)
runApp('read_data.R')
runApp('read_data.R')
?img
runApp('read_data.R')
?fileInput
?renderDT
runApp('read_data.R')
setwd("~/Escritorio/TFM/PEC2_Fase1/TFMjrufv/data/microarray")
unzip(zipfile = "GSM23372.zip")
unzip(zipfile = "GSM23372.zip")
runApp('~/Escritorio/TFM/App-1/read_data.R')
